//프로토타입 
//코드를 그들의 클래스들에 의존시키지않고 기존 객체들을 복사할 수 있도록 하는 생성 디자인 패턴

//문제
객체가 있고 그 객체의 정확한 복사본을 만들고 싶다고 가정하면, 어떻게 하시겠습니까?
먼저 같은 클래스의 새 객체를 생성해야 합니다. 그런다음 원본 객체의 모든 필드들을 살펴본 후 해당 값들을 새 객체에 복사해야 합니다.

너무 쉽군요! 하지만 함정이 있습니다. 객체의 필드들 중 일부가 비공개여서 객체 자체의 외부에서 볼 수 없을 수 있으므로
모든 객체를 그런 식으로 복사하지 못합니다

이 직접적인 접근 방식에는 한 가지 문제가 더 있습니다. 객체의 복제본을 생성하려면 객체의 클래스를 알아야 하므로,
당신의 코드가 해당 클래스에 의존하게 된다는 것입니다. 또, 예를 들어 메서드의 매개변수가 일부 인터페이스를 따르는 모든 객체를 수락할 때
당신은 그 객체가 따르는 인터페이스만 알고, 그 객체의 구상 클래스는 알지 못할 수 있습니다.


- 해결책
프로토 타입 패턴은 실제로 복제되는 객체들에 복제 프로세스를 위임합니다.
패턴은 복제를 지원하는 모든 객체에 대한 공통 인터페이스를 선언합니다.
이 인터페이스를 사용하면 코드를 객체의 클래스에 결합하지 않고도 해당 객체를 복제할 수 있습니다.
일반적으로 이러한 인터페이스에는 단일 clone메서드만 포함됩니다.

clone메서드의 구현은 모든 클래스에서 매우 유사합니다.
이 메서드는 현재 클래스의 객체를 만든 후 이전 객체의 모든 필드 값을 새 객체로 전달합니다.
대부분의 프로그래밍 언어는 객체들이 같은 클래스에 속한 다른 객체의 비공개 필드에 접근(access)할 수 있도록 하므로
비공개 필드들을 복사하는것도 가능합니다.

복제를 지원하는 객체를 프로토타입이라고 합니다. 당신의 객체들에 수십개의 필드와 수백개의 가능한 설정들이있는 경우
이를 복제하는것이 서브클래싱의 대안이 될 수 있습니다.

- 장점
당신은 객체들을 그 구상 클래스들에 결합하지 않고 복제할 수 이씃ㅂ니다
반복되는 초기화 코드를 제거한 후 그 대신 미리 만들어진 프로토타입을 복제하는 방법을 사용할 수 있습니다.
복잡한 객체들을 더 쉽게 생성할 수 있습니다.
복잡한 객체들에 대한 사전 설정들을 처리할 때 상속 대신 사용할 수 있는 방법입니다.

- 단점
순환참조가 있는 복잡한 객체들을 복제하는 것은 매우 까다로울 수 있습니다.

