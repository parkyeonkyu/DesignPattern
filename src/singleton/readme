#싱글턴 패턴

 - 의도
   싱글턴 패턴은 클래스에 인스턴스가 하나만 있도록 하면서 이 인스턴스에 대한 전역 접근(액세스)
  지점을 제공하는 생성 디자인 패턴입니다.
  
 - 문제
  싱글턴 패턴은 한 번에 두 가지의 문제를 동시에 해결함으로써 단일책임원칙을 위반합니다
  1. 클래스에 인스턴스가 하나만 있도록 합니다.
  2. 해당 인스턴스에 대한 전역 접근 지점을 제공합니다.
  
 - 해결책
  싱글턴의 모든 구현은 공통적으로 다음 두 단계를 갖습니다.
  1. 다른 객체들이 싱글턴 클래스와 함께 new 연산자를 사용하지 못하도록 디폴트 생성자를 비공개로 설정하세요.
  2. 생성자 역할을하는 정적 생성 메서드를 만드세요. 내부적으로 이 메서드는 객체를 만들기 위해 비공개 생성자를 호출한 후
    객체를 정적 필드에 저장합니다. 이 메서드에 대한 그 다음 호출들은 모두 캐시된 객체를 반환합니다.
    
  당신의 코드가 싱글턴 클래스에 접근할 수 있는 경우, 이 코드는 싱글턴 정적 메서드를 호출할 수 있습니다. 
  따라서 해당 메서드가 호출될 때마다 항상 같은 객체가 반환됩니다.
  
  쓰레드에서의 싱글턴
  https://refactoring.guru/ko/design-patterns/singleton/java/example#example-2