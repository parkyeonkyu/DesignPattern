빌더는 복잡한객체들을 단계별로 생성할 수 있도록 하는 생성 디자인 패턴
이패턴을 사용하면 같은 제작 코드를 사용하여 객체의 다양한 유형들과 표현을 제작할 수 있습니다.

https://mangkyu.tistory.com/163
https://readystory.tistory.com/121


장점 
1. 필요한 데이터만 설정할 수 있음
2. 유연성을 확보할 수 있음
3. 가독성을 높일 수 있음
4. 변경 가능성을 최소화할 수 있음

문제
많은 필드와 중첩된 객체들을 힘들게 단계별로 초기화해야하는 복잡한 객체를 상상해 보세요
이러한 초기화 코드는 일반적으로 많은 매개변수가 있는 괴물같은 생성자 내부에 묻혀있습니다.
또, 더 최악의 상황에는 클라이언트 코드 전체에 흩어져 있을 수도 있습니다.

예를 들어 House(집) 객체를 만드는 방법에 대해 생각해 봅시다. 간단한 집을 지으려면 네개의 벽과 바닥을 만든 후 문도 설치하고
한쌍의 창문도 맞춘 후 지붕도 만들어야 합니다.
하지만 뒤뜰과 기타 물품(난방 시스템, 배관 및 전기 배선 등)이 있는 더 크고 현대적인 집을 원하면 어떻게 해야 할까요?

위 문제의 가장 간단한 해결책은 기초 (House)클래스를 확장하고 매개변수의 모든 조합을
포함하는 자식 클래스의 집합을 만드는것입니다.
그러나 당신은 결국 상당한 수의 자식 클래스를 만들게 될것입니다. 
새로운 매개변수(예:현관 스타일)를 추가할때마다 이 계층구조는 훨씬 더 복잡해질 것입니다.

자식 클래스들을 늘리지 않는 다른 접근 방식이 있습니다
기초(House)클래스에 House객체를 제어하는 모든 가능한 매개변수를 포함한 거대한 생성자를 만드는 것입니다.
이 접근 방식은 실제로 자식 클래스들의 필요성을 제거하나, 다른 문제를 만들어냅니다.

보통 대부분의 매개변수가 사용되지않아 생성자 호출들의 코드가 매우 못생겨질 것입니다.
예를 들어, 극소수의 집들에만 수영장이 있으므로 수영장과 관련된 매개변수들은 십중팔구 사용되지 않을 것입니다.



해결책
빌더 패턴은 자신의 클래스에서 객체 생성 코드를 추출하여 builders(건축업자들)라는
별도의 객체들로 이동하도록 제안합니다.

이패턴은 객체 생성을 일련의 단계들(벽건설, 문건설 등)로 정리하며, 객체를 생성하고 싶으면 위 단계를 builder(빌더) 객체에 실행하면 됩니다.
또 중요한점은 모든 단계를 호출할 필요가 없다는 것으로, 객체의 특정 설정을 제작하는데 필요한 단계들만 호출하면됩니다.

일부 건축단계들은 제품의 다양한 표현을 건축해야하는 경우 다른 구현들이 필요할 수 있습니다.
예를 들어, 오두막의 벽은 나무로 지을 수 있지만 성벽은 돌로 지어야 합니다.

이런 경우 같은 건축 단계들의 집합을 다른 방식으로 구현하는 여러 다른 빌더 클래스를 생성할 수 있으며,
그런다음 건축 프로세스(건축 단계에 대한 순서화된 호출들의 집합)내에서 이러한 빌더들을 사용하여 다양한 종류의 객체를 생성할 수 있습니다.

