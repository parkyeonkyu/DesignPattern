
팩토리 메서드 패턴
조건에 따른 객체 생성을 팩토리 클래스로 위임하여, 팩토르 클래스에서 객체를 생성하는 패턴 ( 링크 )
추상 팩토리 패턴
서로 관련이 있는 객체들을 통째로 묶어서 팩토리 클래스로 만들고, 이들 팩토리를 조건에 따라 생성하도록 다시 팩토리를 만들어서 객체를 생성하는 패턴
추상 팩토리 패턴은 어떻게 보면, 팩토리 메서드 패턴을 좀 더 캡슐화한 방식이라고 볼 수 있습니다.

예를 들어, 컴퓨터를 생산하는 공장이 있을 때, 마우스, 키보드, 모니터의 제조사로 Samsung과 LG가 있다고 가정하겠습니다.
컴퓨터를 생산할 때 구성품은 전부 삼성으로 만들거나, 전부 LG로 만들어야겠죠?
키보드, 모니터는 Samsung인데, 마우스만 LG면 안되겠죠....

이렇게 컴퓨터는 같은 제조사인 구성품들로 생산되어야 합니다.
다시 말하면, SamsungComputer 객체는 항상 삼성 마우스, 키보드, 모니터 객체들이 묶여서 생산되어야 합니다.
즉, 객체를 일관적으로 생산해야 할 필요가 있습니다.

또한 코드 레벨에서 보면, SamsungComputer인지 LGComputer인지는 조건에 따라 분기될 것이기 때문에
팩토리 메서드 패턴과 같이, 조건에 따라 객체를 생성하는 부분을 Factory 클래스로 정의할 것입니다.

주의할 것은 추상 팩토리 패턴이 팩토리 메서드 패턴의 상위호환이 아니라는 것입니다.
두 패턴의 차이는 명확하기 때문에 상황에 따라 적절한 선택을 해야할 것입니다.





추상팩토리
 추상 팩토리는 당신의 코드가 관련된 제품군의 다양한 패밀리들과 작동해야 하지만 해당 제품들의 구상 클래스들에 의존하고 싶지 않을 때 사용하세요. 
 왜냐하면 이러한 클래스들은 당신에게 미리 알려지지 않았을 수 있으며, 그 때문에 향후 확장성​(extensibility)​을 허용하기를 원할 수 있기 때문입니다.
 
https://refactoring.guru/ko/design-patterns/abstract-factory
문제
예를 들어 당신이 가구 판매장을 위한 프로그램을 만들고 있다고 가정합시다. 당신의 코드는 다음을 나타내는 클래스들로 구성됩니다.
1. 관련제품들로 형성된 패밀리(제품군), 예:의자+소파+커피테이블
2. 해당 제품군의 여러가지 변형, 예를 들어 의자+소파+커피테이블 같은 제품들은
   현대식, 빅토리안, 아르데코양식 과같은 변형으로 제공됩니다.
   
이제 당신이 새로운 개별 가구 객체를 생성했을때, 이 객체들이 기존의 같은 패밀리 내에 있는 다른 가구 객체들과 일치하는 변형(스타일)을
가지도록 할 방법이 필요합니다. 그 이유는 당신의 고객이 스타일이 일치하지 않는 가구 세트를 받으면 크게 실망할 수 있기 때문입니다.

또, 가구 공급업체들은 카탈로그를 매우 자주 변경하기 때문에, 그들은 새로운 제품 또는 제품군(패밀리)을 추가할때마다
기존 코드를 변경해야 하는 번거로움을 피하고 싶을것입니다.

해결책
추상 공장 패턴의 첫 번째 방안은, 각 제품 패밀리(제품군)에 해당하는 개별적인 인터페이스를 명시적으로 선언하는것입니다(예: 의자, 소파 또는 커피테이블).
그다음은, 제품의 모든 변형이 위 인터페이스를 따르도록 합니다. 예를들어, 모든 의자의 변형들은 Chiar(의자) 인터페이스를 구현한다.
모든 커피테이블 변형들은 CoffeTable(커피 테이블) 인터페이스를 구현한다, 등의 규칙을 명시합니다.

추상 공장 패턴의 다음 단계는 추상 팩토리 패턴을 선언하는 것입니다. 
추상공장 패턴은 제품패밀리 내의 개별 제품들의 생성 메서드들이 목록화되어있는 인터페이스입니다
(예: createChair(의자 생성), createSofa(소파 생성), createCoffeTable(커피 테이블 생성))

다음은 제품 변형을 다룰 차례입니다. 제품 패밀리의 각 변형에 대해 AbstractFactory 추상 팩토리 인터페이스를 기반으로 별도의 팩토리 클래스를 생성합니다.
팩토리는 특정 종류의 제품을 반환하는 클래스입니다. 예를 들어 ModernFurnitureFactory(현대식 가구 팩토리)
에서는 다음 객체들만 생성할 수 있습니다 : ModernChair(현대식 의자), ModernSofa(현대식 소파), ModernCoffeeTable(현대식 커피 테이블)

클라이언트 코드는 자신에 해당하는 추상 인터페이스를 통해 팩토리들과 제품들 모두와 함께 작동해야 합니다.
그래야 클라이언트 코드에 넘기는 팩토리의 종류와 제품 변형들을 클라이언트 코드를 손상하지 않으며 자유자재로 변경할 수 있습니다.

